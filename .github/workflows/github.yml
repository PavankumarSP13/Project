# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main
#       - development
#   pull_request:
#     branches:
#       - main
#       - development
      

# jobs:
#   build:
#     runs-on: self-hosted

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Set up JDK 17
#       uses: actions/setup-java@v3
#       with:
#         distribution: 'adopt'
#         java-version: '17'

#     - name: Grant execute permission for gradlew
#       run: chmod +x ./Github_Actions/mea-itaas/github-service/gradlew

#     - name: Build the project
#       run: ./gradlew build
#       working-directory: ./Github_Actions/mea-itaas/github-service


#     - name: List build directory contents
#       run: ls -al ./Github_Actions/mea-itaas/github-service/build/libs

#     - name: Upload build artifacts
#       uses: actions/upload-artifact@v2
#       with:
#         name: build-artifact
#         path: ./Github_Actions/mea-itaas/github-service/build/libs/feedback-service-0.1.0.jar

#   deploy_to_dev:
#     runs-on: self-hosted
#     needs: build
#     if: github.ref == 'refs/heads/development' || github.event.pull_request.base.ref == 'development'

#     steps:
#     - name: Download build artifacts
#       uses: actions/download-artifact@v2
#       with:
#         name: build-artifact

#     - name: Copy JAR to target directory
#       run: cp ./feedback-service-0.1.0.jar /home/tricon/helloSignUpgradedJars

#     - name: Execute deployment script on dev server
#       run: |
#             sshpass -p ${{ secrets.BACKEND_SERVER_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.BACKEND_USER }}@${{ secrets.BACKEND_SERVER_IP }} << 'EOF'
             
#             # Path variables
#             JAR_PATH="/home/tricon/helloSignUpgradedJars/feedback-service-0.1.0.jar"
#             LOG_PATH="/home/tricon/logs/feedback-service/feedback-service.out"
#             JAVA_PATH="/usr/lib/jvm/java-17-openjdk-amd64/bin/java"
            
#             # Find and kill the existing process
#             PID=$(sudo -S lsof -t -i :${{ secrets.FEEDBACK_SERVICE_PORT }}<<< ${{ secrets.BACKEND_SERVER_PASSWORD }})
#             if [ -n "$PID" ]; then
#               echo "Killing process $PID running on port ${{ secrets.FEEDBACK_SERVICE_PORT }}"
#               echo ${{ secrets.BACKEND_SERVER_PASSWORD }} | sudo -S kill -9 $PID
#             else
#               echo "No process found running on port $PORT"
#             fi
            
#             # Run the new JAR file
#             echo "Starting new JAR file"
#             echo ${{ secrets.BACKEND_SERVER_PASSWORD }} | sudo -S nohup $JAVA_PATH -jar -Dspring.profiles.active=dev -Djsse.enableCBCProtection=false $JAR_PATH > $LOG_PATH 2>&1 &
#             EOF
          

#   deploy_to_prod:
#     runs-on: self-hosted
#     needs: build
#     if: github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main'

#     steps:
#     - name: Download build artifacts
#       uses: actions/download-artifact@v2
#       with:
#         name: build-artifact

#     - name: Copy JAR to target directory
#       run: cp ./feedback-service-0.1.0.jar /home/tricon/helloSign_Upgraded_ProductionJars

#     - name: Execute deployment script on prod server
#       run: |
#             sshpass -p ${{ secrets.BACKEND_SERVER_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.BACKEND_USER }}@${{ secrets.PROD_BACKEND_SERVER_IP }} << 'EOF'
            
#             # Path variables
#             JAR_PATH="/home/tricon/helloSign_Upgraded_ProductionJars/feedback-service-0.1.0.jar"
#             LOG_PATH="/home/tricon/logs/feedback-service/feedback-service.out"
#             JAVA_PATH="/usr/lib/jvm/java-17-openjdk-amd64/bin/java"
            
#             # Find and kill the existing process
#             PID=$(sudo -S lsof -t -i :${{ secrets.FEEDBACK_SERVICE_PORT }}<<< ${{ secrets.BACKEND_SERVER_PASSWORD }})
#             if [ -n "$PID" ]; then
#               echo "Killing process $PID running on port ${{ secrets.FEEDBACK_SERVICE_PORT }}"
#               echo ${{ secrets.BACKEND_SERVER_PASSWORD }} | sudo -S kill -9 $PID
#             else
#               echo "No process found running on port $PORT"
#             fi
            
#             # Run the new JAR file
#             echo "Starting new JAR file"
#             echo ${{ secrets.BACKEND_SERVER_PASSWORD }} | sudo -S nohup $JAVA_PATH -jar -Dspring.profiles.active=prod -Djsse.enableCBCProtection=false $JAR_PATH > $LOG_PATH 2>&1 &
#             EOF
